@using System.ComponentModel.DataAnnotations

<div class="custom-text-field @GetTextFieldClasses()">
    @if (!string.IsNullOrEmpty(Label))
    {
        <label for="@Id">@Label</label>
    }
    
    <div class="text-field-container">
        @if (!string.IsNullOrEmpty(Icon))
        {
            <img class="text-field-icon" src="Images/@Icon" alt="@Icon" />
        }
        
        <input 
            type="@Type" 
            id="@Id"
            @bind="@Value" 
            @bind:event="oninput"
            placeholder="@Placeholder"
            class="text-field-input"
            disabled="@Disabled"
            required="@Required"
            @onchange="HandleChange"
            @onkeyup="HandleChange"
        />
        
        @if (ShowClearButton && !string.IsNullOrEmpty(Value))
        {
            <button class="text-field-clear-button" @onclick="ClearValue">
                âœ•
            </button>
        }
    </div>
    
    @if (!string.IsNullOrEmpty(ValidationMessage))
    {
        <span class="validation-message">@ValidationMessage</span>
    }
</div>

@code {
    [Parameter] public string Id { get; set; } = Guid.NewGuid().ToString();
    [Parameter] public string Label { get; set; }
    [Parameter] public string Placeholder { get; set; }
    [Parameter] public string Icon { get; set; }
    
    [Parameter]
    public string Value { get; set; }
    
    [Parameter]
    public EventCallback<string> ValueChanged { get; set; }
    
    [Parameter] public EventCallback<ChangeEventArgs> OnChange { get; set; }
    [Parameter] public EventCallback<KeyboardEventArgs> OnKeyUp { get; set; }
    
    [Parameter] public string Type { get; set; } = "text";
    [Parameter] public bool Disabled { get; set; }
    [Parameter] public bool Required { get; set; }
    [Parameter] public bool ShowClearButton { get; set; }
    
    [Parameter] public string ValidationMessage { get; set; }
    [Parameter] public bool Secondary { get; set; } = false;

    private async Task HandleChange(ChangeEventArgs e)
    {
        Value = e.Value?.ToString();
        await ValueChanged.InvokeAsync(Value);
        await OnChange.InvokeAsync(e);
    }
    private async Task HandleChange(KeyboardEventArgs e) {
        await ValueChanged.InvokeAsync(Value);
        await OnKeyUp.InvokeAsync(e);
    }

    private async Task ClearValue()
    {
        Value = string.Empty;
        await ValueChanged.InvokeAsync(Value);
    }

    private string GetTextFieldClasses()
    {
        return Secondary ? "custom-text-field-secondary" : "custom-text-field-primary";
    }
}