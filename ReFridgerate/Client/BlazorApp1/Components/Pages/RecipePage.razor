@page "/recipe"
@using System.Security.Claims
@using APIContracts.IngridientDtos
@using APIContracts.RecipeDtos
@using BlazorApp1.Services
@inject IIngredientService IngredientService
@inject IRecipeService RecipeService
@inject NavigationManager navMgr
@inject IThemeState ThemeState
@using Google.Apis.CustomSearchAPI.v1;
@using Google.Apis.CustomSearchAPI.v1.Data;
@using Google.Apis.Services;

<link href="css/Recipe.css?version=0.1" rel="stylesheet"/>

<title>Recipes</title>
<AuthorizeView Roles="Chef">
<Authorized>
<div class="page-container @(ThemeState.IsDarkMode ? "dark" : "light")">
    <div class="header">
        <h1>Recipes</h1>
        <div class="header-controls">
            <div class="category-filters">
                <label for="categoryDropdown" class="dropdown-label">Filters:</label>
                <select id="categoryDropdown" @bind="SelectedType" class="form-select">
                    <option value="">All</option>
                    @foreach (var category in recipeTypes)
                    {
                        <option value="@category">@category.ToString()</option>
                    }
                </select>
            </div>
            <Button Icon="add.png"
                    Text="Add new"
                    OnClick="() => OpenModal()">
            </Button>
        </div>
    </div>
    <div class="recipe-list">
        @if (_recipeList.Count == 0)
        {
        <div class="no-items-message">
            <p>No ingredients have been fetched yet. Please try again later!</p>
        </div>
        }
        else if (filteredRecipes.Count == 0)
        {
        <div class="no-items-message">
            <p>No ingredients match your filters criteria. Adjust your filters and try again!</p>
        </div>
        }
        else{
        @foreach (var recipe in _recipeList) {
        <div class="recipe-container">
            <div class="recipe-image">
                <p class="recipe-name">@recipe.name</p>
                <Icon Src=@getHtmlPicture(recipe.name) Size="huge"></Icon>
            </div>
            <div class="recipe-info">
                <p>
                    <b>Type: </b>@recipe.type
                </p>
                <p>
                    <b>Ingredients:</b>
                </p>
                @foreach (var recipeIngredient in @recipe.ingredients) {
                <p>@recipeIngredient.ingredientName</p>
                }
                <p>
                    <b>Instructions:</b>
                </p>
                <p>@recipe.instruction</p>
            </div>
            <div class="recipe-buttons">
                <Button Icon="editing.png" OnClick="() => OpenEditModal(recipe)">Edit</Button>
                <Button Danger Icon="whiteDelete.png" OnClick="() => OpenDeleteModal(recipe)">Delete</Button>
            </div>
        </div>
        }
        }
    </div>
</div>

<!-- Add Recipe Modal -->
<Modal @ref="addRecipeModal" Title="Create recipe">
    <ChildContent>
        <div class="row">
            <div class="col-2">
                <label class="mt-2">Name: </label>
            </div>
            <div class="col-10">
                <input type="text"
                       class="form-control mt-1 no-border"
                       placeholder="Enter name"
                       @bind="recipeName"/>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label class="mt-2">Instructions: </label>
            </div>
            <div class="col-10">
                <input type="text"
                       class="form-control mt-1 no-border"
                       placeholder="Enter instructions"
                       @bind="recipeInstructions"/>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label class="mt-2">Type: </label>
            </div>
            <div class="col-10">
                <select class="mt-2" @bind="type">
                    @foreach (var recipeType in recipeTypes) {
                        <option>@recipeType</option>
                    }
                </select>
            </div>
        </div>
        <div class="mt-5">
            <label>Choose ingredients:</label>
            <div class="row m-2 justify-content-center align-items-center">
                <div class="col-9">
                    <select @bind="currentIngredient" class="p-1">
                        <option selected>Choose an ingredient</option>
                        @foreach (IngredientDto dto in _ingredientList) {
                            <option>@dto.Name</option>
                        }
                    </select>
                </div>
                <div class="col-2">
                    <input type="number"
                           class="form-control no-border"
                           placeholder="Enter amount"
                           @bind="currentIngredientAmount"/>
                </div>
                <div class="col-1">
                    <Button Icon="add.png"
                            OnClick="() => AddIngredientToRecipe()">
                    </Button>
                </div>
            </div>
            @foreach (RecipeIngredientDto dto in selectedIngredients) {
                <div class="row ingredient-content justify-content-center align-items-center h20 m-2 p-2">
                    <div class="col-3">
                        <label>@dto.IngredientName</label>
                    </div>
                    <div class="col-3">
                        <label>Quantity: </label>
                        @dto.Quantity
                    </div>
                    <div class="col-2">
                        <Button
                            Icon="minus.png"
                            OnClick="() => RemoveIngredientFromRecipe(dto.IngredientName)">
                        </Button>
                    </div>
                </div>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(error)) {
            <div class="blazor-error-boundary">
                @error <br/>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <Button Text="Close" Secondary OnClick="addRecipeModal.Close"/>
        <Button Text="Add" OnClick="() => AddRecipe()"/>
    </FooterContent>
</Modal>

<!-- Delete Recipe Modal -->
<Modal @ref="deleteRecipeModal" Title="Delete recipe">
    <ChildContent>
        <p>Are you sure you want to delete @((selectedRecipe != null) ? selectedRecipe.name : "this recipe")? This action is irreversible!</p>
    </ChildContent>
    <FooterContent>
        <Button Text="Cancel" Secondary OnClick="deleteRecipeModal.Close"/>
        <Button Text="Delete" Danger OnClick="DeleteRecipe"/>
    </FooterContent>
</Modal>

<!-- Edit Recipe Modal -->
<Modal @ref="editRecipeModal" Title="Edit Recipe">
    <ChildContent>
        <div class="row">
            <div class="col-2">
                <label class="mt-2">Name: </label>
            </div>
            <div class="col-10">
                <input type="text"
                       class="form-control mt-1 no-border"
                       placeholder="Enter name"
                       @bind="editedRecipeName"/>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label class="mt-2">Instructions: </label>
            </div>
            <div class="col-10">
                <input type="text"
                       class="form-control mt-1 no-border"
                       placeholder="Enter instructions"
                       @bind="editedRecipeInstructions"/>
            </div>
        </div>
        <div class="row">
            <div class="col-2">
                <label class="mt-2">Type: </label>
            </div>
            <div class="col-10">
                <select class="form-control mt-1 no-border" @bind="editedRecipeType">
                    @foreach (var recipeType in recipeTypes) {
                        <option>@recipeType</option>
                    }
                </select>
            </div>
        </div>
        <div class="mt-5">
            <label>Update Ingredients:</label>
            <div class="row m-2 justify-content-center align-items-center">
                <div class="col-8">
                    <select @bind="currentIngredient" class="p-1">
                        <option selected>Choose an ingredient</option>
                        @foreach (IngredientDto ingredient in _ingredientList) {
                            <option>@ingredient.Name</option>
                        }
                    </select>
                </div>
                <div class="col-2">
                    <input type="number"
                           class="form-control no-border"
                           placeholder="Amount"
                           @bind="currentIngredientAmount"/>
                </div>
                <div class="col-2">
                    <Button Icon="add.png" OnClick="() => AddIngredientToEditedRecipe()"></Button>
                </div>
            </div>
            @foreach (SimplifiedIngredientDto dto in editedIngredients) {
                <div class="row ingredient-content justify-content-center align-items-center h20 m-2 p-2">
                    <div class="col-4">
                        <label>@dto.ingredientName</label>
                    </div>
                    <div class="col-4">
                        <input type="number"
                               class="form-control no-border"
                               @bind="dto.ingredientQuantity"
                               min="0"/>
                    </div>
                    <div class="col-2">
                        <Button Icon="minus.png" OnClick="() => RemoveIngredientFromEditedRecipe(dto.ingredientName)"></Button>
                    </div>
                </div>
            }
        </div>
        @if (!string.IsNullOrWhiteSpace(editError)) {
            <div class="blazor-error-boundary">
                @editError <br/>
            </div>
        }
    </ChildContent>
    <FooterContent>
        <Button Text="Close" Secondary OnClick="editRecipeModal.Close"/>
        <Button Text="Save" OnClick="() => SaveEditedRecipe()"/>
    </FooterContent>
</Modal>
</Authorized>
<NotAuthorized>
</NotAuthorized>
</AuthorizeView>

@code {
    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    private int currentUserId { get; set; }
    private string recipeName { get; set; }
    private string recipeInstructions { get; set; }
    private string type { get; set; }
    private string currentIngredient { get; set; }
    private string error { get; set; } = "";
    private int currentIngredientAmount { get; set; }
    private Modal addRecipeModal;
    private Modal deleteRecipeModal;
    private RecipeDto? selectedRecipe = null;
    private List<IngredientDto> _ingredientList = new();
    private List<RecipeIngredientDto> selectedIngredients = new();
    private List<RecipeDto> _recipeList = new();
    private List<RecipeDto> filteredRecipes = new();
    private Modal editRecipeModal;
    private string editedRecipeName { get; set; }
    private string editedRecipeInstructions { get; set; }
    private string editedRecipeType { get; set; }
    private List<SimplifiedIngredientDto> editedIngredients = new();
    private string editError { get; set; } = "";
    private string searchText = "";
    private string? selectedType;
    private readonly List<string> recipeTypes = new() { "Starter", "Main", "Desert" };
    private CseResource.ListRequest lr;

    protected override async Task OnInitializedAsync() {
        AuthenticationState authenticationState = await State;
        ClaimsPrincipal claimsPrincipal = authenticationState.User;
        if (claimsPrincipal.Identity is null || !claimsPrincipal.Identity.IsAuthenticated) {
            // the user is not logged in
            return;
        }

        // Subscribe to theme changes
        ThemeState.OnThemeChange += async () => { await InvokeAsync(StateHasChanged); };

        string? userName = claimsPrincipal.Identity?.Name;
        IEnumerable<Claim> claims = claimsPrincipal.Claims;
        foreach (var claim in claims) {
            Console.WriteLine($"$ claims: {claim}");
        }
        string userIdAsString = claims.Single(c => c.Type == "Id").Value;
        currentUserId = int.Parse(userIdAsString);

        try {
            _ingredientList = await IngredientService.GetIngredientsAsync();
            _recipeList = await RecipeService.GetRecipesAsync();
            BaseClientService.Initializer init = new();
            init.ApiKey = PasswordSingleton.Instance.Key; //insert the API key 
            init.ApplicationName = "Refridgerate";
            lr = new CustomSearchAPIService(init).Cse.List();
            lr.SearchType = CseResource.ListRequest.SearchTypeEnum.Image;
            lr.Cx = PasswordSingleton.Instance.Cx; //insert the Browser key
            lr.FileType = "png";
            lr.Num = 1;
            filteredRecipes = new List<RecipeDto>(_recipeList); // Initialize filtered list
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
    }

    public void Dispose()
    {
        ThemeState.OnThemeChange -= async () => await InvokeAsync(StateHasChanged);
    }

    public string SelectedType
    {
        get => selectedType;
        set
        {
            selectedType = value;
            ApplyFilters();
        }
    }

    private void FilterByType(string? type) {
        selectedType = type;
        ApplyFilters();
    }

    private void ApplyFilters() {
        var filtered = _recipeList.AsQueryable();

        // Apply search filter
        if (!string.IsNullOrWhiteSpace(searchText)) {
            filtered = filtered.Where(r => r.name.Contains(searchText, StringComparison.OrdinalIgnoreCase));
        }

        // Apply type filter
        if (!string.IsNullOrWhiteSpace(selectedType)) {
            filtered = filtered.Where(r => r.type == selectedType);
        }

        filteredRecipes = filtered.ToList();
        StateHasChanged();
    }

    private void OpenModal() {
        recipeName = "";
        recipeInstructions = "";
        error = "";
        selectedIngredients = new();
        addRecipeModal.Open();
    }

    private async void AddRecipe() {
        error = "";
        if (string.IsNullOrWhiteSpace(recipeName) || string.IsNullOrWhiteSpace(recipeInstructions) || string.IsNullOrWhiteSpace(type)) {
            error = "One of the values has been left empty";
            return;
        }
        if (selectedIngredients.Count == 0) {
            error = "You need some ingredients in a recipe";
            return;
        }

        CreateRecipeDto createRecipeDto = new()
        {
            name = recipeName,
            instructions = recipeInstructions,
            type = type,
            creatorId = currentUserId,
            ingredients = selectedIngredients
        };

        try {
            await RecipeService.AddRecipeAsync(createRecipeDto);
            _recipeList = await RecipeService.GetRecipesAsync();
            addRecipeModal.Close();
            StateHasChanged();
        }
        catch (Exception ex) {
            error = $"Error adding recipe: {ex.Message}";
        }
    }


    private void AddIngredientToRecipe() {
        IngredientDto? ingredientDto = _ingredientList.SingleOrDefault(d => d.Name == currentIngredient);
        RecipeIngredientDto? attempted = selectedIngredients.SingleOrDefault(d => d.IngredientName == currentIngredient);
        if (ingredientDto is null || attempted is not null) {
            error = "Something went wrong";
            Console.WriteLine(error);
            return;
        }

        error = "";
        RecipeIngredientDto toAdd = new() {
            IngredientId = ingredientDto.Id,
            IngredientName = ingredientDto.Name,
            Quantity = currentIngredientAmount
        };
        selectedIngredients.Add(toAdd);
    }

    private void RemoveIngredientFromRecipe(string ingredientName) {
        RecipeIngredientDto? attempted = selectedIngredients.SingleOrDefault(d => d.IngredientName == ingredientName);
        if (attempted is null) {
            error = "Something went wrong";
            Console.WriteLine(error);
            return;
        }
        selectedIngredients.Remove(attempted);
    }

    private void OpenDeleteModal(RecipeDto recipe) {
        selectedRecipe = recipe;
        deleteRecipeModal.Open();
    }

    private async void DeleteRecipe() {
        if (selectedRecipe != null) {
            await RecipeService.DeleteRecipeAsync(selectedRecipe.id);
            _recipeList.Remove(selectedRecipe);
            ApplyFilters();
            selectedRecipe = null;
            deleteRecipeModal.Close();
        }
    }

    private void OpenEditModal(RecipeDto recipe) {
        selectedRecipe = recipe;
        editedRecipeName = recipe.name;
        editedRecipeInstructions = recipe.instruction;
        editedRecipeType = recipe.type;
        editedIngredients = recipe.ingredients.ToList();
        editError = "";
        editRecipeModal.Open();
    }

    private void AddIngredientToEditedRecipe() {
        IngredientDto? ingredientDto = _ingredientList.SingleOrDefault(d => d.Name == currentIngredient);
        SimplifiedIngredientDto? attempted = editedIngredients.SingleOrDefault(d => d.ingredientName == currentIngredient);
        if (ingredientDto is null || attempted is not null) {
            editError = "Something went wrong";
            return;
        }

        editError = "";
        SimplifiedIngredientDto toAdd = new() {
            ingredientId = ingredientDto.Id,
            ingredientName = ingredientDto.Name,
            ingredientQuantity = currentIngredientAmount
        };
        editedIngredients.Add(toAdd);
    }

    private void RemoveIngredientFromEditedRecipe(string ingredientName) {
        SimplifiedIngredientDto? attempted = editedIngredients.SingleOrDefault(d => d.ingredientName == ingredientName);
        if (attempted is null) {
            editError = "Something went wrong";
            return;
        }
        editedIngredients.Remove(attempted);
    }

    private async Task SaveEditedRecipe() {
        editError = "";
        if (string.IsNullOrWhiteSpace(editedRecipeName) || string.IsNullOrWhiteSpace(editedRecipeInstructions) || string.IsNullOrWhiteSpace(editedRecipeType)) {
            editError = "One of the values has been left empty";
            return;
        }
        if (editedIngredients.Count == 0) {
            editError = "You need some ingredients in a recipe";
            return;
        }

        var createRecipeDto = new CreateRecipeDto {
            name = editedRecipeName,
            instructions = editedRecipeInstructions,
            type = editedRecipeType,
            creatorId = selectedRecipe.creatorId,
            ingredients = editedIngredients.Select(i => new RecipeIngredientDto {
                IngredientId = i.ingredientId,
                IngredientName = i.ingredientName,
                Quantity = i.ingredientQuantity
            }).ToList()
        };

        try {
            RecipeDto updatedRecipe = await RecipeService.UpdateRecipeAsync(selectedRecipe.id, createRecipeDto);
            var index = _recipeList.FindIndex(r => r.id == selectedRecipe.id);
            if (index != -1) {
                _recipeList[index] = updatedRecipe;
            }
            ApplyFilters();
            editRecipeModal.Close();
        }
        catch (Exception ex) {
            editError = $"Error saving recipe: {ex.Message}";
        }
    }
    private string getHtmlPicture(string name) {
        lr.Q = name + " dish";
        return lr.Execute().Items[0].Link;
    }
}