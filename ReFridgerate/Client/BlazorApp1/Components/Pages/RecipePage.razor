@page "/recipe"
@using APIContracts.IngridientDtos
@using APIContracts.RecipeDtos
@using BlazorApp1.Services
@inject IIngredientService IngredientService
@inject IRecipeService RecipeService

<link href="css/Recipe.css?version=0.1" rel="stylesheet"/>


<title>Recipes</title>
<AuthorizeView>
    <Authorized>
        <div class="page-container">
            <div class="header">
                <h1>Recipes</h1>
            </div>
            <div class="modal-footer">
                <Button Icon="add.png"
                        Text="Add new"
                        OnClick="() => OpenModal()">
                </Button>
            </div>
        </div>
        <div class="recipe-list">
            @foreach (var recipe in _recipeList) {
                <div class="recipe-container">
                    <div class="recipe-image">
                        <p class="recipe-name">@recipe.name</p>
                        <Icon Name="@recipe.name" Size="huge"></Icon>
                    </div>
                    <div class="recie-info">
                        <p>
                            <b>Type: </b>@recipe.type
                        </p>
                        <p>
                            <b>Ingredients:</b>
                        </p>
                        @foreach (var recipeIngredient in @recipe.ingredients) {
                            <p>@recipeIngredient.ingredientName</p>
                        }
                        <p>
                            <b>Instructions:</b>
                        </p>
                        <p>@recipe.instruction</p>
                    </div>
                    <div class="recipe-buttons">
                        <Button Icon="editing.png" OnClick="() => OpenEditModal(recipe)">Edit</Button>
                        <Button Danger Icon="whiteDelete.png" OnClick="() => OpenDeleteModal(recipe)">Delete</Button>
                    </div>
                </div>
            }
        </div>
        <Modal @ref="addRecipeModal" Title="Create recipe">
            <ChildContent>
                <div class="row">
                    <div class="col-2">
                        <label class="mt-2">Name: </label>
                    </div>
                    <div class="col-10">
                        <input type="text"
                               class="form-control mt-1 no-border"
                               placeholder="Enter name"
                               @bind="recipeName"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-2">
                        <label class="mt-2">Instructions: </label>
                    </div>
                    <div class="col-10">
                        <input type="text"
                               class="form-control mt-1 no-border"
                               placeholder="Enter instructions"
                               @bind="recipeInstructions"/>
                    </div>
                </div>
                <div class="row">
                    <div class="col-2">
                        <label class="mt-2">Type: </label>
                    </div>
                    <div class="col-10">
                        @* <input type="text" *@
                        @*        class="form-control mt-1 no-border" *@
                        @*        placeholder="Enter type" *@
                        @*        @bind="type"/> *@
                        <select class="mt-2" @bind="type">
                            <option>Starter</option>
                            <option>Main</option>
                            <option>Desert</option>
                        </select>
                    </div>
                </div>
                <div class="mt-5">
                    <label>Choose ingredients:</label>
                    <div class="row m-2 justify-content-center align-items-center">
                        <div class="col-9">
                            <select @bind="currentIngredient" class="p-1">
                                <option selected>Choose an ingredient</option>
                                @foreach (IngredientDto dto in _ingredientList) {
                                    <option>@dto.Name</option>
                                }
                            </select>
                        </div>
                        <div class="col-2">
                            <input type="number"
                                   class="form-control no-border"
                                   placeholder="Enter amount"
                                   @bind="currentIngredientAmount"/>
                        </div>
                        <div class="col-1">
                            <Button Icon="add.png"
                                    OnClick="() => AddIngredientToRecipe()">
                            </Button>
                        </div>
                    </div>
                    @foreach (RecipeIngredientDto dto in selectedIngredients) {
                        <div class="row ingredient-content justify-content-center align-items-center h20 m-2 p-2">
                            <div class="col-3">
                                <label>@dto.IngredientName</label>
                            </div>
                            <div class="col-3">
                                <label>Quantity: </label>
                                @dto.Quantity
                            </div>
                            <div class="col-2">
                                <Button
                                    Icon="minus.png"
                                    OnClick="() => RemoveIngredientFromRecipe(dto.IngredientName)">
                                </Button>
                            </div>
                        </div>
                    }
                </div>
                @if (!string.IsNullOrWhiteSpace(error)) {
                    <div class="blazor-error-boundary">
                        @error <br/>
                    </div>
                }
            </ChildContent>
            <FooterContent>
                <Button Text="Close" Secondary OnClick="addRecipeModal.Close"/>
                <Button Text="Add" OnClick="() => AddRecipe()"/>
            </FooterContent>
        </Modal>
        <Modal @ref="deleteRecipeModal" Title="Delete recipe">
            <ChildContent>
                <p>Are you sure you want to delete @((selectedRecipe != null) ? selectedRecipe.name : "this recipe")? This action is irreversible!</p>
            </ChildContent>
            <FooterContent>
                <Button Text="Cancel" Secondary OnClick="deleteRecipeModal.Close"/>
                <Button Text="Delete" Danger OnClick="DeleteRecipe"/>
            </FooterContent>
        </Modal>

        <Modal @ref="editRecipeModal" Title="Edit recipe">
            <ChildContent>
                <p>Edit in the future</p>
            </ChildContent>
            <FooterContent>
                <Button Text="Cancel" Secondary OnClick="editRecipeModal.Close"/>
                <Button Text="Confirm" OnClick="EditRecipe"/>
            </FooterContent>
        </Modal>
    </Authorized>
    <NotAuthorized>

    </NotAuthorized>
</AuthorizeView>

@code {
    private string recipeName { get; set; }
    private string recipeInstructions { get; set; }
    private string type { get; set; }
    private string currentIngredient { get; set; }
    private string error { get; set; } = "";
    private int currentIngredientAmount { get; set; }
    private Modal addRecipeModal;
    private Modal deleteRecipeModal;
    private Modal editRecipeModal;
    private RecipeDto? selectedRecipe = null;
    private List<IngredientDto> _ingredientList = new();
    private List<RecipeIngredientDto> selectedIngredients = new();
    private List<RecipeDto> _recipeList = new();
    private void OpenModal() {
        recipeName = "";
        recipeInstructions = "";
        error = "";
        selectedIngredients = new();
        addRecipeModal.Open();
    }
    private void AddRecipe() {
        error = "";
        if (string.IsNullOrWhiteSpace(recipeName) || string.IsNullOrWhiteSpace(recipeInstructions) || string.IsNullOrWhiteSpace(type)) {
            error = "One of the values has been left empty";
            return;
        }
        if (selectedIngredients.Count == 0) {
            error = "You need some ingredients in a recipe";
            return;
        }
        CreateRecipeDto createRecipeDto = new() {
            name = recipeName,
            instructions = recipeInstructions,
            type = type,
            creatorId = 1,
            ingredients = selectedIngredients
        };
        RecipeService.AddRecipeAsync(createRecipeDto);
        addRecipeModal.Close();
        OnInitializedAsync();
    }
    private async void RefreshRecipes() {
        _ingredientList = await IngredientService.GetIngredientsAsync();
        _recipeList = await RecipeService.GetRecipesAsync();
    }
    private void AddIngredientToRecipe() {
        IngredientDto? ingredientDto = _ingredientList.SingleOrDefault(d => d.Name == currentIngredient);
        RecipeIngredientDto? attempted = selectedIngredients.SingleOrDefault(d => d.IngredientName == currentIngredient);
        List<Recipe> recipes = new List<Recipe>();
        if (ingredientDto is null || attempted is not null) {
            error = "Something went wrong";
            Console.WriteLine(error);
            return;
        }
        error = "";
        RecipeIngredientDto toAdd = new() {
            IngredientId = ingredientDto.Id,
            IngredientName = ingredientDto.Name,
            Quantity = currentIngredientAmount
        };
        selectedIngredients.Add(toAdd);
    }
    private void RemoveIngredientFromRecipe(string ingredientName) {
        RecipeIngredientDto? attempted = selectedIngredients.SingleOrDefault(d => d.IngredientName == ingredientName);
        if (attempted is null) {
            error = "Something went wrong";
            Console.WriteLine(error);
            return;
        }
        selectedIngredients.Remove(attempted);
    }
    protected async override Task OnInitializedAsync() {
        try {
            _ingredientList = await IngredientService.GetIngredientsAsync();
            _recipeList = await RecipeService.GetRecipesAsync();
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
    }

    private void OpenDeleteModal(RecipeDto recipe) {
        selectedRecipe = recipe;
        deleteRecipeModal.Open();
    }

    private void DeleteRecipe() {
        if (selectedRecipe != null) {
            RecipeService.DeleteRecipeAsync(selectedRecipe.id);
            _recipeList.Remove(selectedRecipe);
            selectedRecipe = null;
            deleteRecipeModal.Close();
        }
    }

    private void OpenEditModal(RecipeDto recipe) {
        selectedRecipe = recipe;
        editRecipeModal.Open();
    }

    private void EditRecipe() {
        if (selectedRecipe != null) {
            //RecipeService.EditRecipeAsync(selectedRecipe.id);
            selectedRecipe = null;
            editRecipeModal.Close();
        }
    }
}