@page "/signup"
@using APIContracts.UserDtos
@using BlazorApp1.Services
@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity.Data
@inject AuthenticationStateProvider AuthProvider
@inject NavigationManager navMgr
@inject IUserService UserService
@rendermode InteractiveServer
<link href="css/SignUp.css?version=0.1" rel="stylesheet" />
<title>Sign Up</title>
<div class="d-flex justify-content-center align-items-center" style="height: 100vh;">
    <div class="signup-container">
        <div class="signup-box">
            <h1>ReFridgerate</h1>
            <form>
                <div class="form-group">
                    <label for="firstName">
                        <i class="fa-user"></i>
                    </label>
                    <input id="firstName" @bind="firstName" type="text" placeholder="First Name" required />
                </div>

                <div class="form-group">
                    <label for="lastName">
                        <i class="fa-user"></i>
                    </label>
                    <input id="lastName" @bind="lastName" type="text" placeholder="Last Name" required />
                </div>

                <div class="form-group">
                    <label for="email">
                        <i class="fa-envelope"></i>
                    </label>
                    <input id="email" @bind="email" type="email" placeholder="Email" required />
                </div>

                <div class="form-group">
                    <label for="password">
                        <i class="fa-lock"></i>
                    </label>
                    <input id="password" @bind="password" type="password" placeholder="Password" required />
                    <button type="button" class="toggle-password">
                        <i class="fa-eye"></i>
                    </button>
                </div>

                <div class="form-group">
                    <label for="confirmPassword">
                        <i class="fa-lock"></i>
                    </label>
                    <input id="confirmPassword" @bind="confirmPassword" type="password" placeholder="Confirm Password" required />
                    <button type="button" class="toggle-password">
                        <i class="fa-eye"></i>
                    </button>
                </div>
                <div>
                    <p style="color: red">@errorLabel</p>
                </div>

                <div class="extras">
                    <p>
                        Already have an account?
                        <a href="/">Log in</a>
                    </p>
                </div>
            </form>
            <div style="display:flex; justify-content: center">
                <Button Text="Sign Up"
                        OnClick="HandleSignUpReq">
                </Button>
            </div>
        </div>
    </div>
</div>


@code {
    private string firstName = "";
    private string lastName = "";
    private string email = "";
    private string password = "";
    private string confirmPassword = "";
    private string errorLabel;

    private async Task HandleSignUpReq()
    {
        await SignUpAsync();
    }

    private async Task SignUpAsync()
    {
        try
        {
            //logic here
           // Console.WriteLine($"Signing up with: FirstName={firstName}, LastName={lastName}, Email={email}, Password={password}");
            CreateUserDto userDto = new()
            {
                Email = email,
                Password = password,
                FirstName = firstName,
                LastName = lastName
            };
           bool success = await UserService.AddUserAsync(userDto);
           if (success)
           {
               await ((SimpleAuthProvider)AuthProvider).Login(email, password);
               navMgr.NavigateTo("/");

           }

           errorLabel = "Something went wrong! Please try again later.";
        }
        catch (Exception e)
        {
            Console.WriteLine(e.Message);
            errorLabel = $"Error: {e.Message}";
            StateHasChanged();
        }
    }
}