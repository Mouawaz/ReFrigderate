@page "/lobby"
@using APIContracts.IngridientDtos
@using BlazorApp.Components.Services
@using BlazorApp1.Services


@inject IIngredientService IngredientService
@inject IThemeState ThemeState

<link href="css/lobby.css?version=0.1" rel="stylesheet"/>
<title>Ingredients</title>
<AuthorizeView Roles= "@($"{"Chef"}, {"Admin"}")" >
    <div class="page-container @(ThemeState.IsDarkMode ? "dark" : "light")">
        <div class="header">
            <h1>Ingredients</h1>
            <div class="header-controls">
                <div class="search-box">
                    <img class="ingredientt" src="Images/search.png" alt="search"/>
                    <input type="text"
                           placeholder="Search..."
                           @bind-value="searchText"
                           @bind-value:event="oninput"
                           @onkeyup="FilterIngredients"/>
                </div>
            </div>
        </div>

        <div class="items-grid">
            @foreach (var ingredient in filteredIngredients)
            {
                <div class="item-card">
                    <div class="item-metadata">
                        <div class="meta-item-custom @GetStatusClass(ingredient.ExpirationStatus)">
                            <Icon class="me-2" Src="Images/time.png" Size="small"/>
                            @ingredient.DaysUntilBad
                        </div>
                        <div class="meta-item-custom @GetStatusClass(ingredient.StockStatus)">
                            <Icon class="me-2" Src="Images/shopping-basket.png" Size="small"/>
                            @ingredient.Amount
                        </div>
                        <div class="notification-bell">
                            @if (ingredient.StockStatus == 2 || ingredient.StockStatus == 3 ||
                                 ingredient.ExpirationStatus == 2 || ingredient.ExpirationStatus == 3)
                            {
                                <Tooltip Tip="@GetWarningMessage(ingredient)">
                                    <Icon Src="Images/notification.png" Size="mini"/>
                                </Tooltip>
                            }
                        </div>
                    </div>

                    <div class="item-image">
                        <Icon Name="@ingredient.Name" Size="medium"/>
                    </div>

                    <div class="item-name">
                        @ingredient.Name
                    </div>

                    <div class="item-actions">
                        <Button Icon="editing.png"
                                Text="Edit"
                                OnClick="() => OpenModal(ingredient)">
                        </Button>
                    </div>
                </div>
            }
        </div>

        <!-- Ingredient Details Modal -->
        <Modal @ref="detailsModal" Title="Ingredient Details">
            <ChildContent>
                @if (selectedIngredient != null)
                {
                    <TabControl OnTabChanged="HandleTabChange">
                        <TabPage Text="Add">
                            <InputRadioGroup @bind-Value="SelectedOptionAdd" class="custom-radio-group">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="1"/>
                                        <label class="form-check-label">Add a certain amount</label>
                                    </div>
                                    <input type="text"
                                           class="form-control mt-2 no-border"
                                           placeholder="Enter amount"
                                           disabled="@(!IsOption1Selected)"
                                           @bind="Option1Value"/>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="2"/>
                                        <label class="form-check-label">Enter the total amount</label>
                                    </div>
                                    <input type="text"
                                           class="form-control mt-2 no-border"
                                           placeholder="Enter total amount"
                                           disabled="@(!IsOption2Selected)"
                                           @bind="Option2Value"/>
                                </div>

                                <div class="mb-3">
                                    <label for="addDate">Expiration Date</label>
                                    <input type="date"
                                           id="addDate"
                                           class="form-control"
                                           @bind="SelectedDate"/>
                                </div>
                            </InputRadioGroup>
                        </TabPage>

                        <TabPage Text="Remove">
                            <InputRadioGroup @bind-Value="SelectedOptionRemove" class="custom-radio-group">
                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="3"/>
                                        <label class="form-check-label">Remove a certain amount</label>
                                    </div>
                                    <input type="text"
                                           class="form-control mt-2 no-border"
                                           placeholder="Enter amount"
                                           disabled="@(!IsOption3Selected)"
                                           @bind="Option3Value"/>
                                </div>
                                <div class="mb-3" hidden="@(!(SelectedOptionRemove == 3))">
                                    <label for="reason">Reason for Subtraction</label>
                                    <textarea id="reason"
                                              class="form-control"
                                              placeholder="Enter reason for subtraction"
                                              @bind="ReasonForSubtraction"></textarea>
                                </div>
                                <div class="mb-3">
                                    <div class="form-check">
                                        <InputRadio class="form-check-input" Value="4"/>
                                        <label class="form-check-label">Enter the total amount</label>
                                    </div>
                                    <input type="text"
                                           class="form-control mt-2 no-border"
                                           placeholder="Enter total amount"
                                           disabled="@(!IsOption4Selected)"
                                           @bind="Option4Value"/>
                                </div>

                                <div class="mb-3">
                                    <label for="removeDate">Expiration Date</label>
                                    <input type="date"
                                           id="removeDate"
                                           class="form-control"
                                           @bind="SelectedDate"
                                           disabled="@(!IsOption4Selected)"/>
                                </div>
                            </InputRadioGroup>
                        </TabPage>
                        <TabPage Text="Thresholds">
                            <div class="mb-3 row s\2">
                                <div class="col-5">
                                    <label class="mt-1">Set the yellow amount: </label>
                                </div>
                                <div class="col-7">
                                    <input type="text"
                                           class="form-control"
                                           placeholder="Enter yellow amount"
                                           @bind="yellowAmount"/>
                                </div>
                            </div>
                            <div class="mb-3 row s\2">
                                <div class="col-5">
                                    <label class="mt-1">Set the yellow days: </label>
                                </div>
                                <div class="col-7">
                                    <input type="text"
                                           class="form-control"
                                           placeholder="Enter yellow days"
                                           @bind="yellowTime"/>
                                </div>
                            </div>
                            <div class="mb-3 row s\3">
                                <div class="col-5">
                                    <label class="mt-1">Set the red amount: </label>
                                </div>
                                <div class="col-7">
                                    <input type="text"
                                           class="form-control"
                                           placeholder="Enter red amount"
                                           @bind="redAmount"/>
                                </div>
                            </div>
                            <div class="mb-3 row s\3">
                                <div class="col-5">
                                    <label class="mt-1">Set the red days: </label>
                                </div>
                                <div class="col-7">
                                    <input type="text"
                                           class="form-control"
                                           placeholder="Enter red days"
                                           @bind="redTime"/>
                                </div>
                            </div>
                        </TabPage>
                    </TabControl>
                }
            </ChildContent>
            <FooterContent>
                <Button Text="Close" Secondary OnClick="detailsModal.Close"/>
                <Button Text="Apply Changes" OnClick="ApplyStockChanges"/>
            </FooterContent>
        </Modal>
    </div>
</AuthorizeView>

@code {
    private string searchText = "";
    private List<IngredientDto> ingredients = new();
    private List<IngredientDto> filteredIngredients = new();
    private int yellowAmount { get; set; }
    private int redAmount{ get; set; }
    private int yellowTime{ get; set; }
    private int redTime{ get; set; }
    private IngredientDto selectedIngredient;
    private Modal detailsModal;
    private String WarningTooltip;
    private string ReasonForSubtraction { get; set; } = string.Empty;

    private int selectedOptionAdd;

    public int SelectedOptionAdd
    {
        get => selectedOptionAdd;
        set
        {
            selectedOptionAdd = value;
            ResetAddInputs();
        }
    }

    private int selectedOptionRemove;

    public int SelectedOptionRemove
    {
        get => selectedOptionRemove;
        set
        {
            selectedOptionRemove = value;
            ResetRemoveInputs();
        }
    }

    private string Option1Value { get; set; }
    private string Option2Value { get; set; }
    private string Option3Value { get; set; }
    private string Option4Value { get; set; }
    private DateTime? SelectedDate { get; set; }

    private bool IsOption1Selected => SelectedOptionAdd == 1;
    private bool IsOption2Selected => SelectedOptionAdd == 2;
    private bool IsOption3Selected => SelectedOptionRemove == 3;
    private bool IsOption4Selected => SelectedOptionRemove == 4;

    private string currentTab = "Add";

    private void HandleTabChange(TabPage activePage) {
        currentTab = activePage.Text;
        ResetAddInputs();
        ResetRemoveInputs();
    }

    private async void RefreshThresholds() {
        ThresholdDto currentThresholds = await IngredientService.GetThresholds(selectedIngredient.Id);
        yellowAmount = currentThresholds.yellowAmount;
        yellowTime = currentThresholds.yellowDaysUntil;
        redAmount = currentThresholds.redAmount;
        redTime = currentThresholds.redDaysUntil;
        Console.WriteLine("refresh");
    }

    private void FilterIngredients()
    {
        if (string.IsNullOrWhiteSpace(searchText))
        {
            filteredIngredients = new List<IngredientDto>(ingredients);
        }
        else
        {
            filteredIngredients = ingredients
                .Where(i => i.Name.Contains(searchText, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
    }


    protected override async Task OnInitializedAsync()
    {
        try
        {
            ingredients = await IngredientService.GetIngredientsAsync();
            filteredIngredients = new List<IngredientDto>(ingredients);

            // Subscribe to theme changes
            ThemeState.OnThemeChange += async () => { await InvokeAsync(StateHasChanged); };
        }
        catch (Exception e)
        {
            Console.WriteLine($"Error fetching ingredients: {e.Message}");
            throw;
        }
    }

    public void Dispose()
    {
        ThemeState.OnThemeChange -= async () => await InvokeAsync(StateHasChanged);
    }


    private void OpenModal(IngredientDto ingredient)
    {
        selectedIngredient = ingredient;
        RefreshThresholds();
        detailsModal.Open();
    }

    private async Task UpdateIngredientStock(IngredientDto ingredient, int newStockStatus, bool isSubtraction)
    {
        try
        {
            var updateIngredient = new UpdateIngredientDto
            {
                DateOfExpiration = SelectedDate?.ToString("d/M/yyyy") ?? new DateTime().ToString("d/M/yyyy"),
                Difference = Math.Abs(newStockStatus - ingredient.Amount),
                Substraction = isSubtraction,
                amount = ingredient.Amount,
                Reason = ReasonForSubtraction
            };

            IngredientDto updatedIngredient = await IngredientService.UpdateIngredientAsync(ingredient.Id, updateIngredient);

            var index = ingredients.FindIndex(i => i.Id == updatedIngredient.Id);
            if (index != -1)
            {
                ingredients[index] = updatedIngredient;
                FilterIngredients();
            }
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating ingredient: {ex.Message}");
        }
    }

    private async Task ApplyStockChanges()
    {
        if (selectedIngredient != null)
        {
            int newStockStatus = 0;
            bool isSubtraction = false;
            if (currentTab == "Thresholds") {
                Console.WriteLine("Updating the thresholds");
                ThresholdDto dto = new() {
                    IndredientId = selectedIngredient.Id,
                    yellowAmount = yellowAmount,
                    redAmount = redAmount,
                    redDaysUntil = redTime,
                    yellowDaysUntil = yellowTime
                };
                IngredientService.UpdateThreshold(selectedIngredient.Id, dto);
                detailsModal.Close();
                return;
            }
            if (SelectedOptionAdd == 1 && int.TryParse(Option1Value, out int addAmount))
            {
                newStockStatus = selectedIngredient.Amount + addAmount;
                isSubtraction = false;
                Console.WriteLine($"Adding {addAmount} to current stock. New stock status: {newStockStatus}. Subtraction = {isSubtraction}. Date of expiration = {SelectedDate}");
            }
            else if (SelectedOptionAdd == 2 && int.TryParse(Option2Value, out int totalStock))
            {
                newStockStatus = totalStock;
                isSubtraction = newStockStatus < selectedIngredient.Amount;
                Console.WriteLine($"Setting total stock to {totalStock}. New stock status: {newStockStatus}. Subtraction = {isSubtraction}. Date of expiration = {SelectedDate}");
            }
            else if (SelectedOptionRemove == 3 && int.TryParse(Option3Value, out int removeAmount))
            {
                newStockStatus = selectedIngredient.Amount - removeAmount;
                isSubtraction = true;
                Console.WriteLine($"Removing {removeAmount} from current stock. New stock status: {newStockStatus}. Subtraction = {isSubtraction}. Date of expiration = {SelectedDate}");
            }
            else if (SelectedOptionRemove == 4 && int.TryParse(Option4Value, out int newTotalStock))
            {
                newStockStatus = newTotalStock;
                isSubtraction = newTotalStock < selectedIngredient.Amount;
                Console.WriteLine($"Setting total stock to {newTotalStock}. New stock status: {newStockStatus}. Subtraction = {isSubtraction}. Date of expiration = {SelectedDate}");
            }
            else
            {
                Console.WriteLine("Invalid input.");
                return;
            }

            await UpdateIngredientStock(selectedIngredient, newStockStatus, isSubtraction);
        }

        detailsModal.Close();
    }

    private void ResetAddInputs()
    {
        Option1Value = string.Empty;
        Option2Value = string.Empty;
        SelectedDate = null;
    }

    private void ResetRemoveInputs()
    {
        Option3Value = string.Empty;
        Option4Value = string.Empty;
        SelectedDate = null;
        ReasonForSubtraction = string.Empty; 
    }

    private string GetStatusClass(int status)
    {
        return status switch
        {
            3 => "status-critical", 
            2 => "status-warning",  
            1 => "status-normal"  
        };
    }

    private string GetWarningMessage(IngredientDto ingredient)
    {
        string msg = "";
        if (ingredient.ExpirationStatus == 3 && ingredient.DaysUntilBad > 0)
        {
            msg += $"{ingredient.Name} is very close to expiration.";
        }

        if (ingredient.ExpirationStatus == 2)
        {
            msg += $"Expiration date approaching in {ingredient.DaysUntilBad} days.";
        }

        if (ingredient.ExpirationStatus == 3 && ingredient.DaysUntilBad <= 0)
        {
            msg += $"{ingredient.Name} has expired";
        }

        if (ingredient.StockStatus == 3 && ingredient.Amount > 0)
        {
            msg += "Low stock, consider restocking soon.";
        }

        if (ingredient.StockStatus == 3 && ingredient.Amount <= 0)
        {
            msg += $"{ingredient.Name} is out of stock";
        }

        if (ingredient.StockStatus == 2)
        {
            msg += $"{ingredient.Name} is running low on stock";
        }

        return msg;
    }

}