@page "/admin"
@using APIContracts.UserDtos
@using BlazorApp1.Services
@inject IUserService UserService
<title>Admin Page</title>
<AuthorizeView Roles= "@($"{"Chef"}, {"Admin"}")">
<div class="container mx-auto p-4">
    <h1 class="text-2xl font-bold mb-4">User Management</h1>

    <div class="mb-4">
        <TextField
            Placeholder="Search users"
            @bind-Value="searchTerm"
            @onchange="FilterUsers"
            @onkeyup="FilterUsers"
            ShowClearButton="false"
        />
    </div>

    <div class="bg-white shadow-md rounded-lg overflow-hidden">
        <table class="w-full">
            <thead class="bg-gray-100 border-b">
            <tr>
                <th class="p-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Full Name</th>
                <th class="p-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Email</th>
                <th class="p-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Role</th>
            </tr>
            </thead>
            <tbody class="divide-y divide-gray-200">
            @foreach (var user in filteredUsers)
            {
                <tr class="hover:bg-gray-50 transition-colors duration-200">
                    <td class="p-3">@user.FullName</td>
                    <td class="p-3">@user.Email</td>
                    <td class="p-3">
                        <select
                            class="w-full p-1 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500"
                            value="@user.Role"
                            @onchange="@(e => ChangeUserRole(user, e.Value.ToString()))">
                            <option value="Unassigned">Unassigned</option>
                            <option value="Chef">Chef</option>
                            <option value="Waiter">Waiter</option>
                            <option value="Admin">Admin</option>
                        </select>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    </div>

    <div>
        <p style="color: red">@ErroLabel</p>
    </div>
    <div>
        <p style="color: lawngreen">@SuccessLabel</p>
    </div>
    <div class="mt-4 flex justify-end">
        <Button
            Text="Update role"
            OnClick="() => UpdateAllUserRoles()"
            Disabled="@(!HasChanges())"
        />
    </div>
</div>
</AuthorizeView>
@code {
    

    private List<UserDto> users = new();
    private List<UserDto> filteredUsers = new();
    private bool change = false;
    private string searchTerm = string.Empty;
    private string ErroLabel;
    private string SuccessLabel;

    protected async override Task OnInitializedAsync()
    {
        try
        {
            users = await UserService.GetAllUsers();
            filteredUsers = users;
        }
        catch (Exception e) {
            Console.WriteLine(e);
            throw;
        }
    }

    private void FilterUsers()
    {
        if (string.IsNullOrWhiteSpace(searchTerm))
        {
            filteredUsers = new List<UserDto>(users);
        }
        else
        {
            filteredUsers = users
                .Where(u =>
                    u.FullName.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    u.Email.Contains(searchTerm, StringComparison.OrdinalIgnoreCase) ||
                    u.Role.Contains(searchTerm, StringComparison.OrdinalIgnoreCase))
                .ToList();
        }
        StateHasChanged();
    }

    private void ChangeUserRole(UserDto user, string newRole)
    {
        user.Role = newRole;
        change = true;
        StateHasChanged();
    }

    private async void UpdateAllUserRoles()
    {
        ErroLabel = "";
        SuccessLabel = "";
        foreach (var user in users)
        {
            try
            {
               bool success = await UserService.UpdateRecipeAsync(user.Id, ConvertRole(user.Role));
               if (!success)
               {
                   ErroLabel = "Something went wrong. Try refreshing the page and update again";
               }

               SuccessLabel = "Users updated";
               change = false;

            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                ErroLabel = e.Message;
                throw;
            }
        }
        FilterUsers();
    }

    private bool HasChanges()
    {
        //return users.Any(u => u.RoleChanged);
        return change;
    }
    private int ConvertRole(string role)
    {
        switch (role)
        {
            case "Unassigned":
                return 0;
            case "Waiter":
                return 1;
            case "Chef":
                return 2;
            case "Admin":
                return 3;
            default:
                throw new ArgumentException("Role isn't one of the options");
        }
    }
}