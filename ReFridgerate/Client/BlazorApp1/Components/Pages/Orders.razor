@page "/orders"
@using APIContracts.IngridientDtos
@using APIContracts.OrderDto
@using APIContracts.RecipeDtos
@using BlazorApp1.Services
@using Microsoft.AspNetCore.SignalR.Client
@inject IThemeState ThemeState
@inject OrdersService OrdersService
@inject IIngredientService IngredientService

<link href="css/orders.css" rel="stylesheet"/>
<title>Orders</title>
<AuthorizeView Roles="Chef">
    <div class="page-container @(ThemeState.IsDarkMode ? "dark" : "light")">
        <div class="header">
            <h1>Orders</h1>
        </div>

        <div class="orders-grid">
            @foreach (var order in filteredOrders)
            {
                <div class="order-card">
                    <div class="order-metadata">
                        <div class="meta-item-custom">
                            <i class="fas fa-table me-2"></i>
                            Table @order.TableNumber
                        </div>
                        <div class="meta-item-custom">
                            <i class="fas fa-clock me-2"></i>
                            @order.OrderTime.ToString("HH:mm")
                        </div>
                    </div>

                    <div class="dishes-list">
                        @foreach (var dish in order.Dishes)
                        {
                            <div class="dish-item">
                                <span class="dish-name">@dish.Recipe.name</span>
                                @if (!string.IsNullOrEmpty(dish.Quantity.ToString()))
                                {
                                    <span class="dish-note">@dish.Quantity.ToString()</span>
                                }
                            </div>
                        }
                    </div>

                    <div class="order-actions">
                        <Button Icon="check.png"
                                Text="Accept"
                                OnClick="@(e => AcceptOrder(order))"/>
                        <Button Icon="cancel.png"
                                Text="Deny"
                                Danger="true"
                                OnClick="@(e => DenyOrder(order))"/>
                    </div>
                </div>
            }
        </div>
        <div>
            <p style="color: red">@ErrorLabel</p>
        </div>
    </div>
    
    <Modal @ref="modal" Title="Order Status">
        <ChildContent>
            <p>@modalMessage</p>
        </ChildContent>
        <FooterContent>
            <Button Text="Close" OnClick="modal.Close"/>
        </FooterContent>
    </Modal>
</AuthorizeView>
@code {
    private HubConnection? hubConnection;
    private List<OrderDto> orders = new List<OrderDto>();
    private List<OrderDto> filteredOrders = new List<OrderDto>();
    private string ErrorLabel = "";
    private Modal modal;
    private string modalMessage; 
    public class Order
    {
        public int TableNumber { get; set; }
        public DateTime OrderTime { get; set; }
        public string Status { get; set; }
        public List<Dish> Dishes { get; set; }
    }

    public class Dish
    {
        public string Name { get; set; }
        public string Note { get; set; }
    }

    protected async override Task OnInitializedAsync()
    {
        //SignalR stuff for socket communication
        OrdersService.OnOrderReceived += OnOrdersReceived;
        await OrdersService.StartConnection();
        
        // Subscribe to theme changes
        ThemeState.OnThemeChange += async () => { await InvokeAsync(StateHasChanged); };
        
        filteredOrders = new List<OrderDto>(orders);
    }

    void OnOrdersReceived(OrderDto order)
    {
        orders.Add(order);
        filteredOrders = new List<OrderDto>(orders);
        InvokeAsync(StateHasChanged);
    }

    private string GetStatusClass(string status)
    {
        return status.ToLower() switch
        {
            "new" => "status-new",
            "inprogress" => "status-inprogress",
            "ready" => "status-ready",
            "completed" => "status-completed",
            _ => ""
        };
    }

    private async Task AcceptOrder(OrderDto order)
    {
        Dictionary<int, int> ingredientsToUpdate = new Dictionary<int, int>();
        List<IngredientDto> ingredients = await IngredientService.GetIngredientsAsync();

        foreach (var ingredient in ingredients)
        {
            int neddedAmount = 0;
            foreach (var dish in order.Dishes)
            {
                SimplifiedIngredientDto ingredientDto = dish.Recipe.ingredients.Find(i => i.ingredientId == ingredient.Id);
                if (!(ingredientDto == null))
                {
                    neddedAmount += ingredientDto.ingredientQuantity * dish.Quantity;
                }
            }

            if (neddedAmount > ingredient.Amount)
            {
                ErrorLabel = "There are not enough ingredients to complete the whole order";
                return;
            }

            if (neddedAmount != 0)
            {
                ingredientsToUpdate.Add(ingredient.Id, neddedAmount);

            }
        }

        foreach (var ingredientInfo in ingredientsToUpdate)
        {
            IngredientDto ingredient = ingredients.Find(i => i.Id == ingredientInfo.Key);
            UpdateIngredientDto updateInfo = new UpdateIngredientDto()
            {
                DateOfExpiration = new DateTime().ToString("d/M/yyyy"),
                Difference = ingredientInfo.Value ,
                Substraction = true,
                amount = ingredient.Amount,
                Reason = "Automatic"
            };
            try
            {
                IngredientDto updatedIngredient = await IngredientService.UpdateIngredientAsync(ingredient.Id, updateInfo);
            }
            catch (Exception e)
            {
                Console.WriteLine(e);
                ErrorLabel = e.Message;
                throw;
            }
        }
        
        orders.Remove(order);
        filteredOrders.Remove(order);
        modalMessage = $"Order for Table {order.TableNumber} has been accepted!";
        modal.Open();
        StateHasChanged();
        return ;
    }

    private async Task DenyOrder(OrderDto order)
    {
        await OrdersService.SendCancellation(order);
        orders.Remove(order);
        filteredOrders.Remove(order);
        modalMessage = $"Order for Table {order.TableNumber} has been denied.";
        modal.Open();
        StateHasChanged();
        return;
    }

    public async ValueTask DisposeAsync()
    {
        if (hubConnection is not null)
        {
            OrdersService.OnOrderReceived -= OnOrdersReceived;
            await OrdersService.DisposeAsync();
        }
    }

}